// Generated by RouteProvider 0.0.0.0
namespace MyNamespace

open System
module MyModule =
  let getProject (projectId:int64) =
      "projects/" + projectId.ToString()
  let PUT__projects (foo:string) =
      "projects/" + foo
  let createProject (projectId:int) =
      "projects/" + projectId.ToString()
  let getProjectComments (projectId:int64) (commentId:int64) =
      "projects/" + projectId.ToString() + "comments/" + commentId.ToString()

  module Internal =
    type TryParseState =
    | Untried = 0
    | Success = 1
    | Failed = 2

    let tryParseInt32 (s:string, parseState: TryParseState byref, result: int byref) =
      match parseState with
      | TryParseState.Failed
      | TryParseState.Success -> ()
      | _ ->
        parseState <- match Int32.TryParse(s, &result) with
        | true -> TryParseState.Success
        | false -> TryParseState.Failed
      parseState = TryParseState.Success

    let tryParseInt64 (s:string, parseState: TryParseState byref, result: int64 byref) =
      match parseState with
      | TryParseState.Failed
      | TryParseState.Success -> ()
      | _ ->
        parseState <- match Int64.TryParse(s, &result) with
        | true -> TryParseState.Success
        | false -> TryParseState.Failed
      parseState = TryParseState.Success

    let fakeBaseUri = new Uri("http://a.a")

    exception RouteNotMatchedException of string * string

  type MyRoutes =
    { getProject: int64->unit
      PUT__projects: string->unit
      createProject: int->unit
      getProjectComments: int64->int64->unit
      notFound: (string->string->unit) option }

    member inline private this.HandleNotFound(verb, path) =
      match this.notFound with
      | None -> raise (Internal.RouteNotMatchedException (verb, path))
      | Some(notFound) -> notFound verb path

    member this.DispatchRoute(verb:string, path:string) : unit =
      let parts = path.Split('/')
      let start = if parts.[0] = "" then 1 else 0
      let endOffset = if parts.Length > 0 && parts.[parts.Length - 1] = "" then 1 else 0
      match parts.Length - start - endOffset with
      | 4 ->
        if String.Equals(parts.[0 + start],"projects") then
          let mutable projectId = 0L
          let mutable projectId_parseState = Internal.TryParseState.Untried
          if Internal.tryParseInt64(parts.[1 + start], &projectId_parseState, &projectId) then
            if String.Equals(parts.[2 + start],"comments") then
              let mutable commentId = 0L
              let mutable commentId_parseState = Internal.TryParseState.Untried
              if Internal.tryParseInt64(parts.[3 + start], &commentId_parseState, &commentId) then
                if verb = "GET" then this.getProjectComments projectId commentId
                else this.HandleNotFound(verb, path)
              else this.HandleNotFound(verb, path)
            else this.HandleNotFound(verb, path)
          else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | 2 ->
        if String.Equals(parts.[0 + start],"projects") then
          let mutable int64ArgDepth_1 = 0L
          let mutable int64ArgDepth_1_parseState = Internal.TryParseState.Untried
          let mutable intArgDepth_1 = 0
          let mutable intArgDepth_1_parseState = Internal.TryParseState.Untried
          if Internal.tryParseInt64(parts.[1 + start], &int64ArgDepth_1_parseState, &int64ArgDepth_1) then
            if verb = "GET" then this.getProject int64ArgDepth_1
            elif verb = "PUT" then this.PUT__projects (parts.[1 + start])
            else this.HandleNotFound(verb, path)
          elif Internal.tryParseInt32(parts.[1 + start], &intArgDepth_1_parseState, &intArgDepth_1) then
            if verb = "POST" then this.createProject intArgDepth_1
            elif verb = "PUT" then this.PUT__projects (parts.[1 + start])
            else this.HandleNotFound(verb, path)
          else
            if verb = "PUT" then this.PUT__projects (parts.[1 + start])
            else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | _ ->
        this.HandleNotFound(verb, path)

    member this.DispatchRoute(verb:string, uri:Uri) : unit =
      // Ensure we have an Absolute Uri, or just about every method on Uri chokes
      let uri = if uri.IsAbsoluteUri then uri else new Uri(Internal.fakeBaseUri, uri)
      let path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped)
      this.DispatchRoute(verb, path)
