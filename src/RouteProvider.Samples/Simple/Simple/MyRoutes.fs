// Generated by RouteProvider 0.0.0.0
namespace IsakSky

open System
module Provided =
  let getProject (projectId:int64) =
      "projects/" + projectId.ToString()
  let getProjectComments (projectId:int64) (commentId:int64) =
      "projects/" + projectId.ToString() + "comments/" + commentId.ToString()
  let updateProject (projectId:int) =
      "projects/" + projectId.ToString()
  let getPersons (name:string) =
      "people/" + name

  module Internal =
    let stringIsAllDigits (s:string) =
      let mutable i = 0
      let mutable foundNonDigit = false
      while i < s.Length && not foundNonDigit do
        let c = s.[i]
        if c < '0' || c > '9' then foundNonDigit <- true
        i <- i + 1
      not foundNonDigit

    let fakeBaseUri = new Uri("http://a.a")

    exception RouteNotMatchedException of string * string

  type MyRoutes2 =
    { getProject: int64->unit
      getProjectComments: int64->int64->unit
      updateProject: int->unit
      getPersons: string->unit
      notFound: (string->string->unit) option }

    member inline private this.HandleNotFound(verb, path) =
      match this.notFound with
      | None -> raise (Internal.RouteNotMatchedException (verb, path))
      | Some(notFound) -> notFound verb path

    member this.DispatchRoute(verb:string, path:string) : unit =
      let parts = path.Split('/')
      let start = if parts.[0] = "" then 1 else 0
      let endOffset = if parts.Length > 0 && parts.[parts.Length - 1] = "" then 1 else 0
      match parts.Length - start - endOffset with
      | 2 ->
        if parts.[start + 0] = "people" then 
          let name = parts.[start + 1]
          if verb = "GET" then 
            this.getPersons name
          else
            this.HandleNotFound(verb, path)
        elif parts.[start + 0] = "projects" then 
          if Internal.stringIsAllDigits(parts.[start + 1]) then 
            let projectId = Int32.Parse(parts.[start + 1])
            if verb = "PUT" then 
              this.updateProject projectId
            else
              this.HandleNotFound(verb, path)
          elif Internal.stringIsAllDigits(parts.[start + 1]) then 
            let projectId = Int64.Parse(parts.[start + 1])
            if verb = "GET" then 
              this.getProject projectId
            else
              this.HandleNotFound(verb, path)
          else
            this.HandleNotFound(verb, path)
        else
          this.HandleNotFound(verb, path)
      | 4 ->
        if parts.[start + 0] = "projects" then 
          if Internal.stringIsAllDigits(parts.[start + 1]) then 
            let projectId = Int64.Parse(parts.[start + 1])
            if parts.[start + 2] = "comments" then 
              if Internal.stringIsAllDigits(parts.[start + 3]) then 
                let commentId = Int64.Parse(parts.[start + 3])
                if verb = "GET" then 
                  this.getProjectComments projectId commentId
                else
                  this.HandleNotFound(verb, path)
              else
                this.HandleNotFound(verb, path)
            else
              this.HandleNotFound(verb, path)
          else
            this.HandleNotFound(verb, path)
        else
          this.HandleNotFound(verb, path)
      | _ ->
        this.HandleNotFound(verb, path)

    member this.DispatchRoute(verb:string, uri:Uri) : unit =
      // Ensure we have an Absolute Uri, or just about every method on Uri chokes
      let uri = if uri.IsAbsoluteUri then uri else new Uri(Internal.fakeBaseUri, uri)
      let path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped)
      this.DispatchRoute(verb, path)
