// Generated by RouteProvider 0.0.0.0
namespace Ns1

open System
module MyModule =
  let GET__projects (projectId:int64) =
      "projects/" + projectId.ToString()
  let PUT__projects_action (projectId:int64) =
      "projects/" + projectId.ToString() + "action/"
  let POST__people  =
      "people/"
  let POST__people_status (personId:int64) (status:string) =
      "people/" + personId.ToString() + "status/" + status

  module Internal =
    let fakeBaseUri = new Uri("http://a.a")

    exception RouteNotMatchedException of string * string

  type MyRoutes<'TReturn> =
    { GET__projects: int64->'TReturn
      PUT__projects_action: int64->'TReturn
      POST__people: unit->'TReturn
      POST__people_status: int64->string->'TReturn
      notFound: (string->string->'TReturn) option }

    member inline private this.HandleNotFound(verb, path) =
      match this.notFound with
      | None -> raise (Internal.RouteNotMatchedException (verb, path))
      | Some(notFound) -> notFound verb path

    member this.DispatchRoute(verb:string, path:string) : 'TReturn =
      let parts = path.Split('/')
      let start = if parts.[0] = "" then 1 else 0
      let endOffset = if parts.Length > 0 && parts.[parts.Length - 1] = "" then 1 else 0
      match parts.Length - start - endOffset with
      | 4 ->
        if String.Equals(parts.[0 + start],"people") then
          let mutable personId = 0L
          if Int64.TryParse(parts.[1 + start], &personId) then
            if String.Equals(parts.[2 + start],"status") then
              if verb = "POST" then this.POST__people_status personId (parts.[3 + start])
              else this.HandleNotFound(verb, path)
            else this.HandleNotFound(verb, path)
          else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | 1 ->
        if String.Equals(parts.[0 + start],"people") then
          if verb = "POST" then this.POST__people()
          else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | 3 ->
        if String.Equals(parts.[0 + start],"projects") then
          let mutable projectId = 0L
          if Int64.TryParse(parts.[1 + start], &projectId) then
            if String.Equals(parts.[2 + start],"action") then
              if verb = "PUT" then this.PUT__projects_action projectId
              else this.HandleNotFound(verb, path)
            else this.HandleNotFound(verb, path)
          else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | 2 ->
        if String.Equals(parts.[0 + start],"projects") then
          let mutable projectId = 0L
          if Int64.TryParse(parts.[1 + start], &projectId) then
            if verb = "GET" then this.GET__projects projectId
            else this.HandleNotFound(verb, path)
          else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | _ ->
        this.HandleNotFound(verb, path)

    member this.DispatchRoute(verb:string, uri:Uri) : 'TReturn =
      // Ensure we have an Absolute Uri, or just about every method on Uri chokes
      let uri = if uri.IsAbsoluteUri then uri else new Uri(Internal.fakeBaseUri, uri)
      let path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped)
      this.DispatchRoute(verb, path)
