// Generated by RouteProvider 0.0.1 args_hash:-1761112850
namespace Ns4

open System
module MyModule =
  let getProjectStats  =
      "projects/statistics/"
  let getProject (projectId:int64) =
      "projects/" + projectId.ToString()
  let getProjectAction (action:string) =
      "projects/" + action

  module Internal =
    let fakeBaseUri = new Uri("http://a.a")

    exception RouteNotMatchedException of string * string

  type MyRoutes4<'TReturn> =
    { getProjectStats: unit->'TReturn
      getProject: int64->'TReturn
      getProjectAction: string->'TReturn
      notFound: (string->string->'TReturn) option }

    member inline private this.HandleNotFound(verb, path) =
      match this.notFound with
      | None -> raise (Internal.RouteNotMatchedException (verb, path))
      | Some(notFound) -> notFound verb path

    member this.DispatchRoute(verb:string, path:string) : 'TReturn =
      let parts = path.Split('/')
      let start = if parts.[0] = "" then 1 else 0
      let endOffset = if parts.Length > 0 && parts.[parts.Length - 1] = "" then 1 else 0
      match parts.Length - start - endOffset with
      | 2 ->
        if String.Equals(parts.[0 + start],"projects") then
          let mutable projectId = 0L
          if String.Equals(parts.[1 + start],"statistics") then
            if verb = "GET" then this.getProjectStats()
            else this.HandleNotFound(verb, path)
          elif Int64.TryParse(parts.[1 + start], &projectId) then
            if verb = "GET" then this.getProject projectId
            elif verb = "GET" then this.getProjectAction (parts.[1 + start])
            else this.HandleNotFound(verb, path)
          else
            if verb = "GET" then this.getProjectAction (parts.[1 + start])
            else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | _ ->
        this.HandleNotFound(verb, path)

    member this.DispatchRoute(verb:string, uri:Uri) : 'TReturn =
      // Ensure we have an Absolute Uri, or just about every method on Uri chokes
      let uri = if uri.IsAbsoluteUri then uri else new Uri(Internal.fakeBaseUri, uri)
      let path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped)
      this.DispatchRoute(verb, path)

    static member Router(getProjectStats: unit->'TReturn,
                         getProject: int64->'TReturn,
                         getProjectAction: string->'TReturn,
                         ?notFound: string->string->'TReturn) : MyRoutes4<_> =
      { getProjectStats = getProjectStats
        getProject = getProject
        getProjectAction = getProjectAction
        notFound = notFound}