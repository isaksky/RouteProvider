// Generated by RouteProvider 0.0.1 args_hash:-1644551860
namespace Ns5

open System
module MyModule =
  let getProjectInt (projectId:int) =
      "projects/" + projectId.ToString()
  let getProjectInt64 (projectId:int64) =
      "projects/" + projectId.ToString()
  let getProjectGuid (projectId:Guid) =
      "projects/" + projectId.ToString("D")
  let getProjectString (projectId:string) =
      "projects/" + projectId

  module Internal =
    let fakeBaseUri = new Uri("http://a.a")

    exception RouteNotMatchedException of string * string

  type MyRoutes5<'TReturn> =
    { getProjectInt: int->'TReturn
      getProjectInt64: int64->'TReturn
      getProjectGuid: Guid->'TReturn
      getProjectString: string->'TReturn
      notFound: (string->string->'TReturn) option }

    member inline private this.HandleNotFound(verb, path) =
      match this.notFound with
      | None -> raise (Internal.RouteNotMatchedException (verb, path))
      | Some(notFound) -> notFound verb path

    member this.DispatchRoute(verb:string, path:string) : 'TReturn =
      let parts = path.Split('/')
      let start = if parts.[0] = "" then 1 else 0
      let endOffset = if parts.Length > 0 && parts.[parts.Length - 1] = "" then 1 else 0
      match parts.Length - start - endOffset with
      | 2 ->
        if String.Equals(parts.[0 + start],"projects") then
          let mutable int64ArgDepth_1 = 0L
          let mutable intArgDepth_1 = 0
          let mutable projectId = Guid.Empty
          if Int64.TryParse(parts.[1 + start], &int64ArgDepth_1) then
            if verb = "GET" then this.getProjectInt64 int64ArgDepth_1
            elif verb = "GET" then this.getProjectString (parts.[1 + start])
            else this.HandleNotFound(verb, path)
          elif Int32.TryParse(parts.[1 + start], &intArgDepth_1) then
            if verb = "GET" then this.getProjectInt intArgDepth_1
            elif verb = "GET" then this.getProjectString (parts.[1 + start])
            else this.HandleNotFound(verb, path)
          elif Guid.TryParseExact(parts.[1 + start], "D", &projectId) then
            if verb = "GET" then this.getProjectGuid projectId
            else this.HandleNotFound(verb, path)
          else
            if verb = "GET" then this.getProjectString (parts.[1 + start])
            else this.HandleNotFound(verb, path)
        else this.HandleNotFound(verb, path)
      | _ ->
        this.HandleNotFound(verb, path)

    member this.DispatchRoute(verb:string, uri:Uri) : 'TReturn =
      // Ensure we have an Absolute Uri, or just about every method on Uri chokes
      let uri = if uri.IsAbsoluteUri then uri else new Uri(Internal.fakeBaseUri, uri)
      let path = uri.GetComponents(UriComponents.Path, UriFormat.Unescaped)
      this.DispatchRoute(verb, path)

    static member Router(getProjectInt: int->'TReturn,
                         getProjectInt64: int64->'TReturn,
                         getProjectGuid: Guid->'TReturn,
                         getProjectString: string->'TReturn,
                         ?notFound: string->string->'TReturn) : MyRoutes5<_> =
      { getProjectInt = getProjectInt
        getProjectInt64 = getProjectInt64
        getProjectGuid = getProjectGuid
        getProjectString = getProjectString
        notFound = notFound}